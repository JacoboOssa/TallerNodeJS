type Query {
    user(id: ID!): User
    users: [User]
    userSearchByEmail(email: String!): User
    comments: [Comment]
    findCommentById(commentId: ID!): CommentDetailResult
}

type CommentDetailResult {
    user_name: String
    comment: String
    reactions: [Reaction]
    user_id: ID
    comment_id: ID
    replies: [ReplyDetail]
}

type ReplyDetail {
    _id: ID
    comment: String
    id_owner: String
    parent: ID
    reactions: [Reaction]
    nested_replies: [ReplyDetail]
}

type CommentDetailResultDTO {
    user_name: String
    comment: String
    reactions: [Reaction]
    user_id: ID
    comment_id: ID
    replies: [ReplyDetailDTO]
}

type ReplyDetailDTO {
    comment: String
    id_owner: String
    parent: ID
    reactions: [Reaction]
    nested_replies: [ReplyDetail]
}

type Reaction {
  reaction: String
  idOwner: String
}

type Reply {
  _id: ID!
  comment: String
  reactions: [Reaction]
  nested_replies: [Reply]
}

type Comment {
  _id: ID!
  comment: String
  reactions: [Reaction]
  replies: [Reply]
  user_id: ID!
}


type CommentDTO {
    _id: ID!
    comment: String
    user: User
}

type User {
    id: ID!
    name: String
    email: String
    password: String
    rol: String
    comments: [Comment]
}


type UpdateCommentResponse {
    comment: String
    comments: [CommentDTO]
}

type UserLogged{
    email: String
    token: String
}

type Mutation {
    createUser(input: CreateUserInput!): User
    updateUser(input: UpdateUserInput!): User
    deleteUser(input: DeleteUserInput!): User
    loginUser(input: LoginUserInput!): UserLogged
    createComment(input: CreateCommentInput!): [CommentDTO]
    updateComment(input: UpdateCommentInput!): UpdateCommentResponse
    deleteComment(input: DeleteCommentInput!): String
    answerComment(input: AnswerCommentInput!): CommentDetailResultDTO
    createReaction(input: CreateReactioninput!): CommentDetailResultDTO
    deleteReaction(input: DeleteReactionInput!): CommentDetailResultDTO
}


input CreateUserInput{
    name: String!
    email: String!
    password: String!
    rol: String!
}

input UpdateUserInput{
    id: ID!
    name: String
    email: String
    password: String
}

input DeleteUserInput{
    id: ID!
}

input LoginUserInput{
    email: String!
    password: String!
}

input CreateCommentInput{
    comment: String!
}

input UpdateCommentInput{
    idComment: ID!
    comment: String
}

input DeleteCommentInput{
    idComment: ID!
}

input AnswerCommentInput{
    comment: String!
    parent: ID!
}

input CreateReactioninput{
    reaction: String!
    commentId: ID!
}

input DeleteReactionInput{
    reactionId: ID!
    commentParentId: ID!
}